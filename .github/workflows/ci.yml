name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-22.04

    env:
      DOCKER_PLATFORM: "linux/amd64,linux/arm64"
      DOCKERHUB_USER: yracnet
      IMAGE_URL: "yracnet/ci01:${{github.run_number}}"
      SERVICE_ID: ci01
      RENDER_API_KEY: ${{secrets.RENDER_API_KEY}}
      DOCKERHUB_TOKEN: ${{secrets.DOCKERHUB_TOKEN}}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install Dependencies
        run: yarn install

      - name: Run Tests
        run: yarn run test

      - name: Save Coverage Test
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: __tests__/coverage

      - name: Run Build
        run: yarn build

      - name: Save Build
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: dist

      # - name: Upload File
      #   uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      #   with:
      #     server: us-east-1.sftpcloud.io
      #     username: 9122c0e7880e427fa2fb582c96358759
      #     password: V18eYHWakQtypWhI8ZBFDaRGHW85664R
      #     local-dir: ./dist/
      #     server-dir: ./build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: docker buildx build --platform ${{env.DOCKER_PLATFORM}} -t ${{env.IMAGE_URL}} .

      - name: List Docker Images
        run: docker images

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Publish Docker Image
        run: |
          docker push ${{env.IMAGE_URL}}

      - name: Deploy to Render
        run: |
          curl --request POST \
          --url https://api.render.com/v1/services/${{env.SERVICE_ID}}/deploys \
          --header "accept: application/json" \
          --header "authorization: Bearer ${{env.RENDER_API_KEY}}" \
          --header "content-type: application/json" \
          --data @- <<EOF
          {
            "clearCache": true,
            "imageUrl": "docker.io/${{env.IMAGE_URL}}"
          }
          EOF

      - name: Finalize Job
        run: echo "Pipeline completed successfully"
